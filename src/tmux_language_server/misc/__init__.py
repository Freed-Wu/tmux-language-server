r"""Misc
========
"""
from typing import Any

from bs4.element import NavigableString, Tag
from tree_sitter_lsp.misc import get_soup

from .._metainfo import SOURCE, project

ALIAS_PREFIX = "(alias: "


def get_schema() -> dict[str, Any]:
    r"""Get schema.

    :rtype: dict[str, Any]
    """
    filetype = "tmux"
    schema = {
        "$id": f"{SOURCE}/blob/main/src/termux_language_server/assets/json/{filetype}.json",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$comment": (
            "Don't edit this file directly! It is generated by "
            f"`{project} --generate-schema={filetype}`."
        ),
        "type": "object",
        "properties": {},
    }
    soup = get_soup("tmux.1", "groff", "mdoc")
    p = soup.find("p", string="CLIENTS AND SESSIONS")
    while p and p.text != "EXIT MESSAGES":
        b = p.find("b")
        if (
            isinstance(b, Tag)
            and b.text == p.text.split()[0]
            and not isinstance(p, NavigableString)
            and p.attrs.get("style") == "margin-top: 1em"
        ):
            description = p.text.replace("\n", " ")
            name = b.text
            p = p.find_next("p")
            if not p:
                continue
            b = p.find("b")
            if p.text.startswith(ALIAS_PREFIX) and isinstance(b, Tag):
                alias = b.text
                description += "\n" + alias
                p = p.find_next("p")
            else:
                alias = name
            if not p:
                continue
            description += "\n" + p.text.replace("\n", " ")
            schema["properties"][name] = schema["properties"][alias] = {
                "description": description
            }
        p = p.find_next("p")
    return schema
